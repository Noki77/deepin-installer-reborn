#!/bin/bash
# Copyright (c) 2016 Deepin Ltd. All rights reserved.
# Use of this source is governed by General Public License that can be found
# in the LICENSE file.

# Remove unused packages
# If `deepin-installer-reborn` is uninstalled, deepin-installer-settings
# will be removed too. Both "installer_get" and "installer_set" will not
# work any more in chroot environment.
# So, always put this script to last step of in_chroot stage.

if ! is_x86; then
    # Only uninstall installer if not in x86 platform
    affected=("/usr/bin/deepin-installer-*" "/usr/share/applications/deepin-installer-*" "/usr/share/deepin-installer-reborn" "/usr/share/doc/deepin-installer-reborn" "/usr/share/icons/hicolor/scalable/apps/deepin-installer-*" "/usr/share/locale/*/LC_MESSAGES/deepin-installer-timezones.mo" "/usr/share/polkit-1" "/etc/live" "/lib/live" "/lib/systemd/system/systemd-timesyncd.service.d/disable-timesyncd-with-installer.conf")
    for current in "${affected[@]}" do
        rm -rf $current
    done
    return 0
fi

declare -a UNUSED_PKGS

DI_LUPIN=$(installer_get "DI_LUPIN")
DI_LOCALE=$(installer_get "DI_LOCALE")
LANG=${DI_LOCALE%.*}

case ${LANG} in
  zh_*|en_*)
    UNUSED_PKGS+=(evince-common)
  ;;
  *)
    UNUSED_PKGS+=(foxitreader)
  ;;
esac

# Check whether btrfs filesystem is used in machine.
detect_btrfs() {
  for i in $(lsblk -o FSTYPE | sed '/^$/d' | uniq); do
    [ "${i}" = "btrfs" ] && return 0
  done
  return 1
}

# Check whether current machine is virtualbox.
detect_vbox() {
  if dmidecode | grep -q "Product Name: VirtualBox"; then
    return 0
  fi
  return 1
}

# Uninstall "deepin-installer-reborn" only if reboot_setup is false.
if [ x$(installer_get "system_info_setup_after_reboot") != xtrue ]; then
  UNUSED_PKGS+=(deepin-installer-reborn)
fi

if grep -q boot=casper /proc/cmdline; then
  UNUSED_PKGS+=("casper")
fi
if grep -q boot=live /proc/cmdline; then
  UNUSED_PKGS+=("live-boot*" "live-config*")
fi

detect_btrfs || UNUSED_PKGS+=("btrfs-tools")
[ x${DI_LUPIN} = "xtrue" ] || UNUSED_PKGS+=("lupin-support")
detect_vbox || UNUSED_PKGS+=("virtualbox-guest-*")

# Check package existence.
declare -a EXISTING_UNUSED_PKGS
for pkg in ${UNUSED_PKGS[@]}; do
  pacman -Ssq $pkg && EXISTING_UNUSED_PKGS+=($pkg)
done
msg "Remove packages: ${EXISTING_UNUSED_PKGS[@]}"
pacman -Rdd --noconfirm ${EXISTING_UNUSED_PKGS[@]}

return 0
